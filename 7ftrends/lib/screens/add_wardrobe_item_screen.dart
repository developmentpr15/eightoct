import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/wardrobe_service.dart';
import '../models/wardrobe_item.dart';

class AddWardrobeItemScreen extends StatefulWidget {
  final ClothingCategory category;

  const AddWardrobeItemScreen({super.key, required this.category});

  @override
  State<AddWardrobeItemScreen> createState() => _AddWardrobeItemScreenState();
}

class _AddWardrobeItemScreenState extends State<AddWardrobeItemScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _brandController = TextEditingController();
  final TextEditingController _colorController = TextEditingController();
  final TextEditingController _sizeController = TextEditingController();
  final TextEditingController _materialController = TextEditingController();
  final TextEditingController _priceController = TextEditingController();
  final TextEditingController _notesController = TextEditingController();
  
  String? _subcategory;
  DateTime? _purchaseDate;
  bool _isFavorite = false;
  String? _selectedImage;

  final List<String> _topSubcategories = [
    'T-Shirts', 'Shirts', 'Blouses', 'Sweaters', 'Hoodies', 'Tank Tops'
  ];
  final List<String> _bottomSubcategories = [
    'Jeans', 'Pants', 'Shorts', 'Skirts', 'Leggings'
  ];
  final List<String> _outerwearSubcategories = [
    'Jackets', 'Coats', 'Blazers', 'Vests'
  ];
  final List<String> _shoesSubcategories = [
    'Sneakers', 'Boots', 'Sandals', 'Heels', 'Flats'
  ];
  final List<String> _accessoriesSubcategories = [
    'Watches', 'Belts', 'Scarves', 'Gloves', 'Sunglasses'
  ];

  List<String> get _subcategories {
    switch (widget.category) {
      case ClothingCategory.tops:
        return _topSubcategories;
      case ClothingCategory.bottoms:
        return _bottomSubcategories;
      case ClothingCategory.outerwear:
        return _outerwearSubcategories;
      case ClothingCategory.shoes:
        return _shoesSubcategories;
      case ClothingCategory.accessories:
        return _accessoriesSubcategories;
      default:
        return [];
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _brandController.dispose();
    _colorController.dispose();
    _sizeController.dispose();
    _materialController.dispose();
    _priceController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  Future<void> _selectImage() async {
    // In a real app, you'd use image_picker
    // For now, we'll use a placeholder
    setState(() {
      _selectedImage = 'https://via.placeholder.com/300';
    });
  }

  Future<void> _selectPurchaseDate() async {
    final date = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime.now(),
    );
    if (date != null) {
      setState(() {
        _purchaseDate = date;
      });
    }
  }

  Future<void> _saveItem() async {
    if (!_formKey.currentState!.validate()) return;

    if (_selectedImage == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select an image')),
      );
      return;
    }

    final wardrobeProvider = Provider.of<WardrobeProvider>(context, listen: false);
    
    final item = WardrobeItem(
      id: '', // Will be generated by the service
      userId: '', // Will be set by the service
      name: _nameController.text,
      category: widget.category,
      subcategory: _subcategory,
      brand: _brandController.text.trim().isEmpty ? null : _brandController.text,
      color: _colorController.text.trim().isEmpty ? null : _colorController.text,
      size: _sizeController.text.trim().isEmpty ? null : _sizeController.text,
      material: _materialController.text.trim().isEmpty ? null : _materialController.text,
      purchaseDate: _purchaseDate,
      price: _priceController.text.trim().isEmpty 
          ? null 
          : double.tryParse(_priceController.text),
      imageUrl: _selectedImage!,
      aiTags: [], // Will be generated by AI service
      notes: _notesController.text.trim().isEmpty ? null : _notesController.text,
      isFavorite: _isFavorite,
      timesWorn: 0,
      lastWorn: null,
      createdAt: DateTime.now(),
    );

    final success = await wardrobeProvider.addWardrobeItem(item);
    
    if (success) {
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Item added successfully!')),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Failed to add item')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add ${widget.category.name}'),
        actions: [
          TextButton(
            onPressed: _saveItem,
            child: const Text('Save'),
          ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Image selection
              GestureDetector(
                onTap: _selectImage,
                child: Container(
                  width: double.infinity,
                  height: 200,
                  decoration: BoxDecoration(
                    color: Colors.grey[200],
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.grey[300]!),
                  ),
                  child: _selectedImage != null
                      ? ClipRRect(
                          borderRadius: BorderRadius.circular(12),
                          child: Image.network(
                            _selectedImage!,
                            fit: BoxFit.cover,
                            errorBuilder: (context, error, stackTrace) {
                              return const Center(
                                child: Icon(Icons.image, size: 64, color: Colors.grey),
                              );
                            },
                          ),
                        )
                      : const Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(Icons.camera_alt, size: 48, color: Colors.grey),
                              SizedBox(height: 8),
                              Text('Tap to add image', style: TextStyle(color: Colors.grey)),
                            ],
                          ),
                        ),
                ),
              ),
              const SizedBox(height: 24),

              // Name
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: 'Name *',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please enter a name';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),

              // Subcategory
              if (_subcategories.isNotEmpty) ...[
                DropdownButtonFormField<String>(
                  value: _subcategory,
                  decoration: const InputDecoration(
                    labelText: 'Subcategory',
                    border: OutlineInputBorder(),
                  ),
                  items: _subcategories.map((subcategory) {
                    return DropdownMenuItem(
                      value: subcategory,
                      child: Text(subcategory),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      _subcategory = value;
                    });
                  },
                ),
                const SizedBox(height: 16),
              ],

              // Brand
              TextFormField(
                controller: _brandController,
                decoration: const InputDecoration(
                  labelText: 'Brand',
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 16),

              // Color and Size row
              Row(
                children: [
                  Expanded(
                    child: TextFormField(
                      controller: _colorController,
                      decoration: const InputDecoration(
                        labelText: 'Color',
                        border: OutlineInputBorder(),
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: TextFormField(
                      controller: _sizeController,
                      decoration: const InputDecoration(
                        labelText: 'Size',
                        border: OutlineInputBorder(),
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),

              // Material
              TextFormField(
                controller: _materialController,
                decoration: const InputDecoration(
                  labelText: 'Material',
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 16),

              // Purchase Date and Price row
              Row(
                children: [
                  Expanded(
                    child: GestureDetector(
                      onTap: _selectPurchaseDate,
                      child: InputDecorator(
                        decoration: const InputDecoration(
                          labelText: 'Purchase Date',
                          border: OutlineInputBorder(),
                        ),
                        child: Text(
                          _purchaseDate != null
                              ? '${_purchaseDate!.day}/${_purchaseDate!.month}/${_purchaseDate!.year}'
                              : 'Select date',
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: TextFormField(
                      controller: _priceController,
                      decoration: const InputDecoration(
                        labelText: 'Price',
                        border: OutlineInputBorder(),
                        prefixText: '\$',
                      ),
                      keyboardType: TextInputType.number,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),

              // Notes
              TextFormField(
                controller: _notesController,
                decoration: const InputDecoration(
                  labelText: 'Notes',
                  border: OutlineInputBorder(),
                ),
                maxLines: 3,
              ),
              const SizedBox(height: 16),

              // Favorite checkbox
              CheckboxListTile(
                title: const Text('Add to favorites'),
                value: _isFavorite,
                onChanged: (value) {
                  setState(() {
                    _isFavorite = value ?? false;
                  });
                },
                controlAffinity: ListTileControlAffinity.leading,
              ),
              const SizedBox(height: 32),

              // Save button
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _saveItem,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF7C4DFF),
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: const Text('Save Item'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}